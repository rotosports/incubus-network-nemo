// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fury/committee/v1beta1/permissions.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GodPermission allows any governance proposal. It is used mainly for testing.
type GodPermission struct {
}

func (m *GodPermission) Reset()         { *m = GodPermission{} }
func (m *GodPermission) String() string { return proto.CompactTextString(m) }
func (*GodPermission) ProtoMessage()    {}
func (*GodPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c59332e20c1b8c0, []int{0}
}
func (m *GodPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GodPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GodPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GodPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GodPermission.Merge(m, src)
}
func (m *GodPermission) XXX_Size() int {
	return m.Size()
}
func (m *GodPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_GodPermission.DiscardUnknown(m)
}

var xxx_messageInfo_GodPermission proto.InternalMessageInfo

// SoftwareUpgradePermission permission type for software upgrade proposals
type SoftwareUpgradePermission struct {
}

func (m *SoftwareUpgradePermission) Reset()         { *m = SoftwareUpgradePermission{} }
func (m *SoftwareUpgradePermission) String() string { return proto.CompactTextString(m) }
func (*SoftwareUpgradePermission) ProtoMessage()    {}
func (*SoftwareUpgradePermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c59332e20c1b8c0, []int{1}
}
func (m *SoftwareUpgradePermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoftwareUpgradePermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoftwareUpgradePermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoftwareUpgradePermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareUpgradePermission.Merge(m, src)
}
func (m *SoftwareUpgradePermission) XXX_Size() int {
	return m.Size()
}
func (m *SoftwareUpgradePermission) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareUpgradePermission.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareUpgradePermission proto.InternalMessageInfo

// TextPermission allows any text governance proposal.
type TextPermission struct {
}

func (m *TextPermission) Reset()         { *m = TextPermission{} }
func (m *TextPermission) String() string { return proto.CompactTextString(m) }
func (*TextPermission) ProtoMessage()    {}
func (*TextPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c59332e20c1b8c0, []int{2}
}
func (m *TextPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextPermission.Merge(m, src)
}
func (m *TextPermission) XXX_Size() int {
	return m.Size()
}
func (m *TextPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_TextPermission.DiscardUnknown(m)
}

var xxx_messageInfo_TextPermission proto.InternalMessageInfo

// CommunityCDPRepayDebtPermission allows submission of CommunityCDPRepayDebtProposal
type CommunityCDPRepayDebtPermission struct {
}

func (m *CommunityCDPRepayDebtPermission) Reset()         { *m = CommunityCDPRepayDebtPermission{} }
func (m *CommunityCDPRepayDebtPermission) String() string { return proto.CompactTextString(m) }
func (*CommunityCDPRepayDebtPermission) ProtoMessage()    {}
func (*CommunityCDPRepayDebtPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c59332e20c1b8c0, []int{3}
}
func (m *CommunityCDPRepayDebtPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityCDPRepayDebtPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityCDPRepayDebtPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityCDPRepayDebtPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityCDPRepayDebtPermission.Merge(m, src)
}
func (m *CommunityCDPRepayDebtPermission) XXX_Size() int {
	return m.Size()
}
func (m *CommunityCDPRepayDebtPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityCDPRepayDebtPermission.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityCDPRepayDebtPermission proto.InternalMessageInfo

// CommunityCDPWithdrawCollateralPermission allows submission of CommunityCDPWithdrawCollateralProposal
type CommunityCDPWithdrawCollateralPermission struct {
}

func (m *CommunityCDPWithdrawCollateralPermission) Reset() {
	*m = CommunityCDPWithdrawCollateralPermission{}
}
func (m *CommunityCDPWithdrawCollateralPermission) String() string { return proto.CompactTextString(m) }
func (*CommunityCDPWithdrawCollateralPermission) ProtoMessage()    {}
func (*CommunityCDPWithdrawCollateralPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c59332e20c1b8c0, []int{4}
}
func (m *CommunityCDPWithdrawCollateralPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityCDPWithdrawCollateralPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityCDPWithdrawCollateralPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityCDPWithdrawCollateralPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityCDPWithdrawCollateralPermission.Merge(m, src)
}
func (m *CommunityCDPWithdrawCollateralPermission) XXX_Size() int {
	return m.Size()
}
func (m *CommunityCDPWithdrawCollateralPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityCDPWithdrawCollateralPermission.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityCDPWithdrawCollateralPermission proto.InternalMessageInfo

// CommunityPoolLendWithdrawPermission allows submission of CommunityPoolLendWithdrawProposal
type CommunityPoolLendWithdrawPermission struct {
}

func (m *CommunityPoolLendWithdrawPermission) Reset()         { *m = CommunityPoolLendWithdrawPermission{} }
func (m *CommunityPoolLendWithdrawPermission) String() string { return proto.CompactTextString(m) }
func (*CommunityPoolLendWithdrawPermission) ProtoMessage()    {}
func (*CommunityPoolLendWithdrawPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c59332e20c1b8c0, []int{5}
}
func (m *CommunityPoolLendWithdrawPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityPoolLendWithdrawPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityPoolLendWithdrawPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityPoolLendWithdrawPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityPoolLendWithdrawPermission.Merge(m, src)
}
func (m *CommunityPoolLendWithdrawPermission) XXX_Size() int {
	return m.Size()
}
func (m *CommunityPoolLendWithdrawPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityPoolLendWithdrawPermission.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityPoolLendWithdrawPermission proto.InternalMessageInfo

// ParamsChangePermission allows any parameter or sub parameter change proposal.
type ParamsChangePermission struct {
	AllowedParamsChanges AllowedParamsChanges `protobuf:"bytes,1,rep,name=allowed_params_changes,json=allowedParamsChanges,proto3,castrepeated=AllowedParamsChanges" json:"allowed_params_changes"`
}

func (m *ParamsChangePermission) Reset()         { *m = ParamsChangePermission{} }
func (m *ParamsChangePermission) String() string { return proto.CompactTextString(m) }
func (*ParamsChangePermission) ProtoMessage()    {}
func (*ParamsChangePermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c59332e20c1b8c0, []int{6}
}
func (m *ParamsChangePermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsChangePermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsChangePermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsChangePermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsChangePermission.Merge(m, src)
}
func (m *ParamsChangePermission) XXX_Size() int {
	return m.Size()
}
func (m *ParamsChangePermission) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsChangePermission.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsChangePermission proto.InternalMessageInfo

func (m *ParamsChangePermission) GetAllowedParamsChanges() AllowedParamsChanges {
	if m != nil {
		return m.AllowedParamsChanges
	}
	return nil
}

// AllowedParamsChange contains data on the allowed parameter changes for subspace, key, and sub params requirements.
type AllowedParamsChange struct {
	Subspace string `protobuf:"bytes,1,opt,name=subspace,proto3" json:"subspace,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Requirements for when the subparam value is a single record. This contains list of allowed attribute keys that can
	// be changed on the subparam record.
	SingleSubparamAllowedAttrs []string `protobuf:"bytes,3,rep,name=single_subparam_allowed_attrs,json=singleSubparamAllowedAttrs,proto3" json:"single_subparam_allowed_attrs,omitempty"`
	// Requirements for when the subparam value is a list of records. The requirements contains requirements for each
	// record in the list.
	MultiSubparamsRequirements []SubparamRequirement `protobuf:"bytes,4,rep,name=multi_subparams_requirements,json=multiSubparamsRequirements,proto3" json:"multi_subparams_requirements"`
}

func (m *AllowedParamsChange) Reset()         { *m = AllowedParamsChange{} }
func (m *AllowedParamsChange) String() string { return proto.CompactTextString(m) }
func (*AllowedParamsChange) ProtoMessage()    {}
func (*AllowedParamsChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c59332e20c1b8c0, []int{7}
}
func (m *AllowedParamsChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowedParamsChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowedParamsChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowedParamsChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedParamsChange.Merge(m, src)
}
func (m *AllowedParamsChange) XXX_Size() int {
	return m.Size()
}
func (m *AllowedParamsChange) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedParamsChange.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedParamsChange proto.InternalMessageInfo

func (m *AllowedParamsChange) GetSubspace() string {
	if m != nil {
		return m.Subspace
	}
	return ""
}

func (m *AllowedParamsChange) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AllowedParamsChange) GetSingleSubparamAllowedAttrs() []string {
	if m != nil {
		return m.SingleSubparamAllowedAttrs
	}
	return nil
}

func (m *AllowedParamsChange) GetMultiSubparamsRequirements() []SubparamRequirement {
	if m != nil {
		return m.MultiSubparamsRequirements
	}
	return nil
}

// SubparamRequirement contains requirements for a single record in a subparam value list
type SubparamRequirement struct {
	// The required attr key of the param record.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The required param value for the param record key. The key and value is used to match to the target param record.
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	// The sub param attrs that are allowed to be changed.
	AllowedSubparamAttrChanges []string `protobuf:"bytes,3,rep,name=allowed_subparam_attr_changes,json=allowedSubparamAttrChanges,proto3" json:"allowed_subparam_attr_changes,omitempty"`
}

func (m *SubparamRequirement) Reset()         { *m = SubparamRequirement{} }
func (m *SubparamRequirement) String() string { return proto.CompactTextString(m) }
func (*SubparamRequirement) ProtoMessage()    {}
func (*SubparamRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c59332e20c1b8c0, []int{8}
}
func (m *SubparamRequirement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubparamRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubparamRequirement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubparamRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubparamRequirement.Merge(m, src)
}
func (m *SubparamRequirement) XXX_Size() int {
	return m.Size()
}
func (m *SubparamRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_SubparamRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_SubparamRequirement proto.InternalMessageInfo

func (m *SubparamRequirement) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SubparamRequirement) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *SubparamRequirement) GetAllowedSubparamAttrChanges() []string {
	if m != nil {
		return m.AllowedSubparamAttrChanges
	}
	return nil
}

func init() {
	proto.RegisterType((*GodPermission)(nil), "fury.committee.v1beta1.GodPermission")
	proto.RegisterType((*SoftwareUpgradePermission)(nil), "fury.committee.v1beta1.SoftwareUpgradePermission")
	proto.RegisterType((*TextPermission)(nil), "fury.committee.v1beta1.TextPermission")
	proto.RegisterType((*CommunityCDPRepayDebtPermission)(nil), "fury.committee.v1beta1.CommunityCDPRepayDebtPermission")
	proto.RegisterType((*CommunityCDPWithdrawCollateralPermission)(nil), "fury.committee.v1beta1.CommunityCDPWithdrawCollateralPermission")
	proto.RegisterType((*CommunityPoolLendWithdrawPermission)(nil), "fury.committee.v1beta1.CommunityPoolLendWithdrawPermission")
	proto.RegisterType((*ParamsChangePermission)(nil), "fury.committee.v1beta1.ParamsChangePermission")
	proto.RegisterType((*AllowedParamsChange)(nil), "fury.committee.v1beta1.AllowedParamsChange")
	proto.RegisterType((*SubparamRequirement)(nil), "fury.committee.v1beta1.SubparamRequirement")
}

func init() {
	proto.RegisterFile("fury/committee/v1beta1/permissions.proto", fileDescriptor_8c59332e20c1b8c0)
}

var fileDescriptor_8c59332e20c1b8c0 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x6a, 0xdb, 0x4e,
	0x10, 0xc7, 0xad, 0x9f, 0xc3, 0x8f, 0x66, 0x4b, 0x43, 0x50, 0x8c, 0x71, 0x4c, 0x2a, 0x1b, 0xf7,
	0x62, 0x08, 0xb1, 0x70, 0x4b, 0x2f, 0xb9, 0xd9, 0x0e, 0xf4, 0xd0, 0x1e, 0x8c, 0xd2, 0x52, 0xe8,
	0x45, 0xac, 0xec, 0xa9, 0x2c, 0xa2, 0xd5, 0xaa, 0x3b, 0x23, 0x3b, 0x86, 0x42, 0x5f, 0xa1, 0xaf,
	0xd1, 0x9e, 0xfb, 0x10, 0xa1, 0xa7, 0x1c, 0x7b, 0x6a, 0x8b, 0xfd, 0x18, 0xbd, 0x14, 0xfd, 0xb5,
	0xa1, 0x42, 0x37, 0xed, 0xec, 0xe7, 0x3b, 0xab, 0xcf, 0x2e, 0xc3, 0xfa, 0x01, 0x08, 0x69, 0xce,
	0xa4, 0x10, 0x1e, 0x11, 0x80, 0xb9, 0x1c, 0x3a, 0x40, 0x7c, 0x68, 0x86, 0xa0, 0x84, 0x87, 0xe8,
	0xc9, 0x00, 0x07, 0xa1, 0x92, 0x24, 0xf5, 0x66, 0x4c, 0x0e, 0x0a, 0x72, 0x90, 0x91, 0xed, 0xd3,
	0x99, 0x44, 0x21, 0xd1, 0x4e, 0x28, 0x33, 0x5d, 0xa4, 0x91, 0x76, 0xc3, 0x95, 0xae, 0x4c, 0xeb,
	0xf1, 0x57, 0x5a, 0xed, 0x75, 0xd8, 0xa3, 0x17, 0x72, 0x3e, 0x2d, 0x0e, 0xb8, 0x3c, 0xfa, 0xfe,
	0xed, 0x82, 0xed, 0xd6, 0xbd, 0x73, 0x76, 0x7a, 0x2d, 0xdf, 0xd3, 0x8a, 0x2b, 0x78, 0x13, 0xba,
	0x8a, 0xcf, 0xa1, 0x02, 0xee, 0xb2, 0xa3, 0xd7, 0x70, 0x4b, 0x15, 0xc4, 0x90, 0x75, 0x26, 0x52,
	0x88, 0x28, 0xf0, 0x68, 0x3d, 0xb9, 0x9a, 0x5a, 0x10, 0xf2, 0xf5, 0x15, 0x38, 0x55, 0x91, 0x4b,
	0xd6, 0xdf, 0x8f, 0xbc, 0xf5, 0x68, 0x31, 0x57, 0x7c, 0x35, 0x91, 0xbe, 0xcf, 0x09, 0x14, 0xf7,
	0x2b, 0xb2, 0xcf, 0xd9, 0x93, 0x22, 0x3b, 0x95, 0xd2, 0x7f, 0x05, 0xc1, 0x3c, 0x6f, 0x50, 0x11,
	0xfb, 0xa2, 0xb1, 0xe6, 0x94, 0x2b, 0x2e, 0x70, 0xb2, 0xe0, 0x81, 0xbb, 0xa7, 0xac, 0x7f, 0x62,
	0x4d, 0xee, 0xfb, 0x72, 0x05, 0x73, 0x3b, 0x4c, 0x08, 0x7b, 0x96, 0x20, 0xd8, 0xd2, 0xba, 0xf5,
	0xfe, 0xc3, 0xa7, 0xe7, 0x83, 0xf2, 0xa7, 0x19, 0x8c, 0xd2, 0xd4, 0x7e, 0xdb, 0xf1, 0xd9, 0xdd,
	0xcf, 0x4e, 0xed, 0xeb, 0xaf, 0x4e, 0xa3, 0x64, 0x13, 0xad, 0x06, 0x2f, 0xa9, 0xfe, 0xf3, 0xaf,
	0x7f, 0x34, 0x76, 0x52, 0x12, 0xd7, 0xdb, 0xec, 0x01, 0x46, 0x0e, 0x86, 0x7c, 0x06, 0x2d, 0xad,
	0xab, 0xf5, 0x0f, 0xad, 0x62, 0xad, 0x1f, 0xb3, 0xfa, 0x0d, 0xac, 0x5b, 0xff, 0x25, 0xe5, 0xf8,
	0x53, 0x1f, 0xb1, 0xc7, 0xe8, 0x05, 0xae, 0x0f, 0x36, 0x46, 0x4e, 0x22, 0x66, 0xe7, 0x9a, 0x9c,
	0x48, 0x61, 0xab, 0xde, 0xad, 0xf7, 0x0f, 0xad, 0x76, 0x0a, 0x5d, 0x67, 0x4c, 0x76, 0xee, 0x28,
	0x26, 0x74, 0x64, 0x67, 0x22, 0xf2, 0xc9, 0x2b, 0x3a, 0xa0, 0xad, 0xe0, 0x43, 0xe4, 0x29, 0x10,
	0x10, 0x10, 0xb6, 0x0e, 0xaa, 0xef, 0x27, 0xef, 0x69, 0xed, 0x32, 0xe3, 0x83, 0xf8, 0x7e, 0xac,
	0x76, 0xd2, 0x36, 0xdf, 0xc7, 0x3d, 0x00, 0x7b, 0x1f, 0xd9, 0x49, 0x49, 0x30, 0x17, 0xd4, 0x76,
	0x82, 0xc7, 0xac, 0xbe, 0xe4, 0x7e, 0xae, 0xbc, 0xe4, 0x7e, 0xac, 0x9c, 0x2b, 0xee, 0x9c, 0x89,
	0x54, 0xf1, 0xa0, 0x99, 0x72, 0x06, 0x15, 0xce, 0x44, 0x2a, 0x7b, 0x8b, 0xf1, 0xcb, 0xbb, 0x8d,
	0xa1, 0xdd, 0x6f, 0x0c, 0xed, 0xf7, 0xc6, 0xd0, 0x3e, 0x6f, 0x8d, 0xda, 0xfd, 0xd6, 0xa8, 0xfd,
	0xd8, 0x1a, 0xb5, 0x77, 0x43, 0xd7, 0xa3, 0x45, 0xe4, 0xc4, 0x9e, 0xa6, 0x17, 0xcc, 0x22, 0x27,
	0xc2, 0x8b, 0x00, 0x68, 0x25, 0xd5, 0x8d, 0x99, 0x4c, 0xf9, 0xed, 0xde, 0x9c, 0xd3, 0x3a, 0x04,
	0x74, 0xfe, 0x4f, 0x26, 0xf2, 0xd9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x80, 0x4d, 0x87,
	0x06, 0x04, 0x00, 0x00,
}

func (m *GodPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GodPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GodPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SoftwareUpgradePermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwareUpgradePermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoftwareUpgradePermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TextPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CommunityCDPRepayDebtPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityCDPRepayDebtPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityCDPRepayDebtPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CommunityCDPWithdrawCollateralPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityCDPWithdrawCollateralPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityCDPWithdrawCollateralPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CommunityPoolLendWithdrawPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityPoolLendWithdrawPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityPoolLendWithdrawPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ParamsChangePermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsChangePermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsChangePermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedParamsChanges) > 0 {
		for iNdEx := len(m.AllowedParamsChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedParamsChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPermissions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AllowedParamsChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowedParamsChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedParamsChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MultiSubparamsRequirements) > 0 {
		for iNdEx := len(m.MultiSubparamsRequirements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiSubparamsRequirements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPermissions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SingleSubparamAllowedAttrs) > 0 {
		for iNdEx := len(m.SingleSubparamAllowedAttrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SingleSubparamAllowedAttrs[iNdEx])
			copy(dAtA[i:], m.SingleSubparamAllowedAttrs[iNdEx])
			i = encodeVarintPermissions(dAtA, i, uint64(len(m.SingleSubparamAllowedAttrs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPermissions(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subspace) > 0 {
		i -= len(m.Subspace)
		copy(dAtA[i:], m.Subspace)
		i = encodeVarintPermissions(dAtA, i, uint64(len(m.Subspace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubparamRequirement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubparamRequirement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubparamRequirement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedSubparamAttrChanges) > 0 {
		for iNdEx := len(m.AllowedSubparamAttrChanges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedSubparamAttrChanges[iNdEx])
			copy(dAtA[i:], m.AllowedSubparamAttrChanges[iNdEx])
			i = encodeVarintPermissions(dAtA, i, uint64(len(m.AllowedSubparamAttrChanges[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintPermissions(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPermissions(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPermissions(dAtA []byte, offset int, v uint64) int {
	offset -= sovPermissions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GodPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SoftwareUpgradePermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TextPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CommunityCDPRepayDebtPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CommunityCDPWithdrawCollateralPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CommunityPoolLendWithdrawPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ParamsChangePermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedParamsChanges) > 0 {
		for _, e := range m.AllowedParamsChanges {
			l = e.Size()
			n += 1 + l + sovPermissions(uint64(l))
		}
	}
	return n
}

func (m *AllowedParamsChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subspace)
	if l > 0 {
		n += 1 + l + sovPermissions(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPermissions(uint64(l))
	}
	if len(m.SingleSubparamAllowedAttrs) > 0 {
		for _, s := range m.SingleSubparamAllowedAttrs {
			l = len(s)
			n += 1 + l + sovPermissions(uint64(l))
		}
	}
	if len(m.MultiSubparamsRequirements) > 0 {
		for _, e := range m.MultiSubparamsRequirements {
			l = e.Size()
			n += 1 + l + sovPermissions(uint64(l))
		}
	}
	return n
}

func (m *SubparamRequirement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPermissions(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovPermissions(uint64(l))
	}
	if len(m.AllowedSubparamAttrChanges) > 0 {
		for _, s := range m.AllowedSubparamAttrChanges {
			l = len(s)
			n += 1 + l + sovPermissions(uint64(l))
		}
	}
	return n
}

func sovPermissions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPermissions(x uint64) (n int) {
	return sovPermissions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GodPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GodPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GodPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwareUpgradePermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwareUpgradePermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwareUpgradePermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityCDPRepayDebtPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityCDPRepayDebtPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityCDPRepayDebtPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityCDPWithdrawCollateralPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityCDPWithdrawCollateralPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityCDPWithdrawCollateralPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityPoolLendWithdrawPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityPoolLendWithdrawPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityPoolLendWithdrawPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsChangePermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsChangePermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsChangePermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedParamsChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPermissions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPermissions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedParamsChanges = append(m.AllowedParamsChanges, AllowedParamsChange{})
			if err := m.AllowedParamsChanges[len(m.AllowedParamsChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowedParamsChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowedParamsChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowedParamsChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPermissions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPermissions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPermissions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPermissions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleSubparamAllowedAttrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPermissions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPermissions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SingleSubparamAllowedAttrs = append(m.SingleSubparamAllowedAttrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiSubparamsRequirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPermissions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPermissions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiSubparamsRequirements = append(m.MultiSubparamsRequirements, SubparamRequirement{})
			if err := m.MultiSubparamsRequirements[len(m.MultiSubparamsRequirements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubparamRequirement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubparamRequirement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubparamRequirement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPermissions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPermissions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPermissions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPermissions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedSubparamAttrChanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPermissions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPermissions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedSubparamAttrChanges = append(m.AllowedSubparamAttrChanges, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPermissions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPermissions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPermissions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPermissions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPermissions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPermissions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPermissions = fmt.Errorf("proto: unexpected end of group")
)
