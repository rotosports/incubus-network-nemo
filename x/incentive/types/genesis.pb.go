// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fury/incentive/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AccumulationTime stores the previous reward distribution time and its corresponding collateral type
type AccumulationTime struct {
	CollateralType           string    `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty"`
	PreviousAccumulationTime time.Time `protobuf:"bytes,2,opt,name=previous_accumulation_time,json=previousAccumulationTime,proto3,stdtime" json:"previous_accumulation_time"`
}

func (m *AccumulationTime) Reset()         { *m = AccumulationTime{} }
func (m *AccumulationTime) String() string { return proto.CompactTextString(m) }
func (*AccumulationTime) ProtoMessage()    {}
func (*AccumulationTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_9189883803c1f6e5, []int{0}
}
func (m *AccumulationTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccumulationTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccumulationTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccumulationTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccumulationTime.Merge(m, src)
}
func (m *AccumulationTime) XXX_Size() int {
	return m.Size()
}
func (m *AccumulationTime) XXX_DiscardUnknown() {
	xxx_messageInfo_AccumulationTime.DiscardUnknown(m)
}

var xxx_messageInfo_AccumulationTime proto.InternalMessageInfo

// GenesisRewardState groups together the global state for a particular reward so it can be exported in genesis.
type GenesisRewardState struct {
	AccumulationTimes  AccumulationTimes  `protobuf:"bytes,1,rep,name=accumulation_times,json=accumulationTimes,proto3,castrepeated=AccumulationTimes" json:"accumulation_times"`
	MultiRewardIndexes MultiRewardIndexes `protobuf:"bytes,2,rep,name=multi_reward_indexes,json=multiRewardIndexes,proto3,castrepeated=MultiRewardIndexes" json:"multi_reward_indexes"`
}

func (m *GenesisRewardState) Reset()         { *m = GenesisRewardState{} }
func (m *GenesisRewardState) String() string { return proto.CompactTextString(m) }
func (*GenesisRewardState) ProtoMessage()    {}
func (*GenesisRewardState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9189883803c1f6e5, []int{1}
}
func (m *GenesisRewardState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisRewardState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisRewardState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisRewardState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisRewardState.Merge(m, src)
}
func (m *GenesisRewardState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisRewardState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisRewardState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisRewardState proto.InternalMessageInfo

// GenesisState is the state that must be provided at genesis.
type GenesisState struct {
	Params                      Params                      `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	USDXRewardState             GenesisRewardState          `protobuf:"bytes,2,opt,name=usdx_reward_state,json=usdxRewardState,proto3" json:"usdx_reward_state"`
	HardSupplyRewardState       GenesisRewardState          `protobuf:"bytes,3,opt,name=hard_supply_reward_state,json=hardSupplyRewardState,proto3" json:"hard_supply_reward_state"`
	HardBorrowRewardState       GenesisRewardState          `protobuf:"bytes,4,opt,name=hard_borrow_reward_state,json=hardBorrowRewardState,proto3" json:"hard_borrow_reward_state"`
	DelegatorRewardState        GenesisRewardState          `protobuf:"bytes,5,opt,name=delegator_reward_state,json=delegatorRewardState,proto3" json:"delegator_reward_state"`
	SwapRewardState             GenesisRewardState          `protobuf:"bytes,6,opt,name=swap_reward_state,json=swapRewardState,proto3" json:"swap_reward_state"`
	USDXMintingClaims           USDXMintingClaims           `protobuf:"bytes,7,rep,name=usdx_minting_claims,json=usdxMintingClaims,proto3,castrepeated=USDXMintingClaims" json:"usdx_minting_claims"`
	HardLiquidityProviderClaims HardLiquidityProviderClaims `protobuf:"bytes,8,rep,name=hard_liquidity_provider_claims,json=hardLiquidityProviderClaims,proto3,castrepeated=HardLiquidityProviderClaims" json:"hard_liquidity_provider_claims"`
	DelegatorClaims             DelegatorClaims             `protobuf:"bytes,9,rep,name=delegator_claims,json=delegatorClaims,proto3,castrepeated=DelegatorClaims" json:"delegator_claims"`
	SwapClaims                  SwapClaims                  `protobuf:"bytes,10,rep,name=swap_claims,json=swapClaims,proto3,castrepeated=SwapClaims" json:"swap_claims"`
	SavingsRewardState          GenesisRewardState          `protobuf:"bytes,11,opt,name=savings_reward_state,json=savingsRewardState,proto3" json:"savings_reward_state"`
	SavingsClaims               SavingsClaims               `protobuf:"bytes,12,rep,name=savings_claims,json=savingsClaims,proto3,castrepeated=SavingsClaims" json:"savings_claims"`
	EarnRewardState             GenesisRewardState          `protobuf:"bytes,13,opt,name=earn_reward_state,json=earnRewardState,proto3" json:"earn_reward_state"`
	EarnClaims                  EarnClaims                  `protobuf:"bytes,14,rep,name=earn_claims,json=earnClaims,proto3,castrepeated=EarnClaims" json:"earn_claims"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9189883803c1f6e5, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AccumulationTime)(nil), "fury.incentive.v1beta1.AccumulationTime")
	proto.RegisterType((*GenesisRewardState)(nil), "fury.incentive.v1beta1.GenesisRewardState")
	proto.RegisterType((*GenesisState)(nil), "fury.incentive.v1beta1.GenesisState")
}

func init() {
	proto.RegisterFile("fury/incentive/v1beta1/genesis.proto", fileDescriptor_9189883803c1f6e5)
}

var fileDescriptor_9189883803c1f6e5 = []byte{
	// 790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x6f, 0xf3, 0x34,
	0x18, 0x6e, 0xf6, 0x7d, 0x8c, 0xef, 0x73, 0xb7, 0x75, 0x35, 0xdd, 0x56, 0x3a, 0x29, 0x1d, 0xdb,
	0x04, 0x15, 0x12, 0xa9, 0x56, 0xae, 0x5c, 0x08, 0x43, 0x80, 0xc4, 0xc4, 0x94, 0x8e, 0x09, 0x21,
	0xa4, 0xca, 0x69, 0xbc, 0xcc, 0x90, 0xc4, 0xc1, 0x76, 0xda, 0xf5, 0xc6, 0x91, 0xe3, 0x7e, 0x00,
	0x12, 0x77, 0xfe, 0x07, 0xd2, 0x8e, 0x3b, 0x72, 0xda, 0xa0, 0xfb, 0x23, 0xc8, 0x8e, 0xd3, 0x25,
	0xed, 0x32, 0x44, 0xbf, 0x9b, 0xf3, 0xfa, 0x79, 0x9f, 0xe7, 0x79, 0xfd, 0xbe, 0x8e, 0xc1, 0x61,
	0x84, 0x43, 0xda, 0x25, 0xd1, 0x10, 0x47, 0x82, 0x8c, 0x70, 0x77, 0x74, 0xe4, 0x62, 0x81, 0x8e,
	0xba, 0x3e, 0x8e, 0x30, 0x27, 0xdc, 0x8a, 0x19, 0x15, 0x14, 0x6e, 0x4b, 0x94, 0x35, 0x43, 0x59,
	0x1a, 0xd5, 0x6a, 0xf8, 0xd4, 0xa7, 0x0a, 0xd2, 0x95, 0xab, 0x14, 0xdd, 0x6a, 0xfb, 0x94, 0xfa,
	0x01, 0xee, 0xaa, 0x2f, 0x37, 0xb9, 0xe8, 0x0a, 0x12, 0x62, 0x2e, 0x50, 0x18, 0x6b, 0xc0, 0x41,
	0x89, 0xe8, 0x30, 0x40, 0x24, 0xe4, 0xff, 0x01, 0x8a, 0x11, 0x43, 0x19, 0x68, 0xff, 0x77, 0x03,
	0x6c, 0x7e, 0x3a, 0x1c, 0x26, 0x61, 0x12, 0x20, 0x41, 0x68, 0x74, 0x46, 0x42, 0x0c, 0x3f, 0x00,
	0xb5, 0x21, 0x0d, 0x02, 0x24, 0x30, 0x43, 0xc1, 0x40, 0x4c, 0x62, 0xdc, 0x34, 0xf6, 0x8c, 0xce,
	0x6b, 0x67, 0xe3, 0x31, 0x7c, 0x36, 0x89, 0x31, 0x74, 0x41, 0x2b, 0x66, 0x78, 0x44, 0x68, 0xc2,
	0x07, 0x28, 0xc7, 0x32, 0x90, 0x86, 0x9b, 0x2b, 0x7b, 0x46, 0xa7, 0xda, 0x6b, 0x59, 0x69, 0x35,
	0x56, 0x56, 0x8d, 0x75, 0x96, 0x55, 0x63, 0xbf, 0xba, 0xb9, 0x6b, 0x57, 0xae, 0xef, 0xdb, 0x86,
	0xd3, 0xcc, 0x78, 0xe6, 0xcd, 0xec, 0xff, 0xb2, 0x02, 0xe0, 0x17, 0xe9, 0x61, 0x3a, 0x78, 0x8c,
	0x98, 0xd7, 0x17, 0x48, 0x60, 0xc8, 0x00, 0x5c, 0x50, 0xe4, 0x4d, 0x63, 0xef, 0x45, 0xa7, 0xda,
	0xeb, 0x58, 0x4f, 0x1f, 0xb7, 0x35, 0x4f, 0x6e, 0xbf, 0x2b, 0x0d, 0xfc, 0x71, 0xdf, 0xae, 0xcf,
	0xef, 0x70, 0xa7, 0x8e, 0xe6, 0x43, 0x70, 0x04, 0x1a, 0x61, 0x12, 0x08, 0x32, 0x60, 0xca, 0xc8,
	0x80, 0x44, 0x1e, 0xbe, 0xc2, 0xbc, 0xb9, 0xf2, 0xbc, 0xea, 0x89, 0xcc, 0x49, 0xbd, 0x7f, 0x25,
	0x33, 0xec, 0x96, 0x56, 0x85, 0xf3, 0x3b, 0x98, 0x3b, 0x30, 0x5c, 0x88, 0xed, 0xff, 0x59, 0x05,
	0x6b, 0xfa, 0x08, 0xd2, 0xe2, 0x3f, 0x01, 0xab, 0x69, 0x17, 0x55, 0x5f, 0xaa, 0x3d, 0xb3, 0x4c,
	0xfa, 0x54, 0xa1, 0xec, 0x97, 0x52, 0xd0, 0xd1, 0x39, 0x90, 0x82, 0x7a, 0xc2, 0xbd, 0xab, 0xac,
	0x0a, 0x2e, 0x29, 0x75, 0xb3, 0x3e, 0x2c, 0x23, 0x5a, 0xec, 0x80, 0xbd, 0x23, 0x49, 0xa7, 0x77,
	0xed, 0xda, 0xb7, 0xfd, 0xe3, 0xef, 0x72, 0x1b, 0x4e, 0x4d, 0xb2, 0xe7, 0x7b, 0x45, 0x40, 0xf3,
	0x52, 0x29, 0x25, 0x71, 0x1c, 0x4c, 0x8a, 0xba, 0x2f, 0xfe, 0xb7, 0x6e, 0x5a, 0xcc, 0x96, 0x64,
	0xec, 0x2b, 0xc2, 0xa7, 0xa4, 0x5c, 0xca, 0x18, 0x1d, 0x17, 0xa5, 0x5e, 0xbe, 0x89, 0x94, 0xad,
	0x08, 0xf3, 0x52, 0x17, 0x60, 0xdb, 0xc3, 0x01, 0xf6, 0x91, 0xa0, 0xac, 0x28, 0xf4, 0xd6, 0x92,
	0x42, 0x8d, 0x19, 0x5f, 0x5e, 0xe7, 0x07, 0x50, 0xe7, 0x63, 0x14, 0x17, 0x25, 0x56, 0x97, 0x94,
	0xa8, 0x49, 0xaa, 0x3c, 0xfb, 0xaf, 0x06, 0x78, 0x47, 0x4d, 0x43, 0x48, 0x22, 0x41, 0x22, 0x7f,
	0x90, 0xfe, 0x43, 0x9a, 0x6f, 0x3f, 0x3f, 0xd3, 0xb2, 0xe7, 0x27, 0x69, 0xc6, 0x67, 0x32, 0xc1,
	0xb6, 0xf4, 0x34, 0xd4, 0xe7, 0x77, 0xb8, 0xbc, 0x5e, 0x0b, 0x41, 0x47, 0x8d, 0x60, 0x21, 0x04,
	0x7f, 0x33, 0x80, 0xa9, 0x9a, 0x17, 0x90, 0x9f, 0x13, 0xe2, 0x11, 0x31, 0x19, 0xc4, 0x8c, 0x8e,
	0x88, 0x87, 0x59, 0xe6, 0xea, 0x95, 0x72, 0xd5, 0x2b, 0x73, 0xf5, 0x25, 0x62, 0xde, 0xd7, 0x59,
	0xf2, 0xa9, 0xce, 0x4d, 0xfd, 0x1d, 0xe8, 0x3b, 0xb7, 0x5b, 0x8e, 0xe1, 0xce, 0xee, 0x65, 0xf9,
	0x26, 0xfc, 0x11, 0x6c, 0x3e, 0xf6, 0x5b, 0xfb, 0x79, 0xad, 0xfc, 0xbc, 0x5f, 0xe6, 0xe7, 0x38,
	0xc3, 0xa7, 0x1e, 0x76, 0xb4, 0x87, 0x5a, 0x31, 0xce, 0x9d, 0x9a, 0x57, 0x0c, 0xc0, 0x73, 0x50,
	0x55, 0x3d, 0xd7, 0x32, 0x40, 0xc9, 0xbc, 0x57, 0x26, 0xd3, 0x1f, 0xa3, 0x38, 0x55, 0x80, 0x5a,
	0x01, 0xcc, 0x42, 0xdc, 0x01, 0x7c, 0xb6, 0x86, 0x2e, 0x68, 0x70, 0x34, 0x22, 0x91, 0xcf, 0x8b,
	0xe3, 0x54, 0x5d, 0x72, 0x9c, 0xa0, 0x66, 0xcb, 0x4f, 0x94, 0x0b, 0x36, 0x32, 0x0d, 0x6d, 0x7f,
	0x4d, 0xd9, 0x3f, 0x2c, 0xb5, 0x9f, 0xa2, 0xd3, 0x0a, 0xb6, 0x74, 0x05, 0xeb, 0xf9, 0x28, 0x77,
	0xd6, 0x79, 0xfe, 0x53, 0xde, 0x09, 0x8c, 0x58, 0x54, 0x2c, 0x62, 0x7d, 0xd9, 0x3b, 0x21, 0xa9,
	0xf2, 0x15, 0x9c, 0x83, 0xaa, 0x62, 0xd7, 0xf6, 0x37, 0x9e, 0x3f, 0xfd, 0xcf, 0x11, 0x8b, 0xe6,
	0x4e, 0x7f, 0x16, 0xe2, 0x0e, 0xc0, 0xb3, 0xb5, 0xfd, 0xcd, 0xcd, 0x3f, 0x66, 0xe5, 0x66, 0x6a,
	0x1a, 0xb7, 0x53, 0xd3, 0xf8, 0x7b, 0x6a, 0x1a, 0xd7, 0x0f, 0x66, 0xe5, 0xf6, 0xc1, 0xac, 0xfc,
	0xf5, 0x60, 0x56, 0xbe, 0x3f, 0xf2, 0x89, 0xb8, 0x4c, 0x5c, 0x6b, 0x48, 0x43, 0xf9, 0x6a, 0x27,
	0x6e, 0xc2, 0x3f, 0x8a, 0xb0, 0x18, 0x53, 0xf6, 0x53, 0x57, 0x3d, 0xe5, 0x57, 0xb9, 0xc7, 0x5c,
	0x3e, 0xca, 0xdc, 0x5d, 0x55, 0x6f, 0xea, 0xc7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xcd,
	0x68, 0x6b, 0x85, 0x08, 0x00, 0x00,
}

func (m *AccumulationTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccumulationTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccumulationTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PreviousAccumulationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PreviousAccumulationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisRewardState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisRewardState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisRewardState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MultiRewardIndexes) > 0 {
		for iNdEx := len(m.MultiRewardIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiRewardIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AccumulationTimes) > 0 {
		for iNdEx := len(m.AccumulationTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccumulationTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EarnClaims) > 0 {
		for iNdEx := len(m.EarnClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EarnClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	{
		size, err := m.EarnRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.SavingsClaims) > 0 {
		for iNdEx := len(m.SavingsClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SavingsClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	{
		size, err := m.SavingsRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.SwapClaims) > 0 {
		for iNdEx := len(m.SwapClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.DelegatorClaims) > 0 {
		for iNdEx := len(m.DelegatorClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegatorClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.HardLiquidityProviderClaims) > 0 {
		for iNdEx := len(m.HardLiquidityProviderClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HardLiquidityProviderClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.USDXMintingClaims) > 0 {
		for iNdEx := len(m.USDXMintingClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.USDXMintingClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.SwapRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.DelegatorRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.HardBorrowRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.HardSupplyRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.USDXRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccumulationTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PreviousAccumulationTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisRewardState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccumulationTimes) > 0 {
		for _, e := range m.AccumulationTimes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.MultiRewardIndexes) > 0 {
		for _, e := range m.MultiRewardIndexes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.USDXRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.HardSupplyRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.HardBorrowRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.DelegatorRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SwapRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.USDXMintingClaims) > 0 {
		for _, e := range m.USDXMintingClaims {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.HardLiquidityProviderClaims) > 0 {
		for _, e := range m.HardLiquidityProviderClaims {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DelegatorClaims) > 0 {
		for _, e := range m.DelegatorClaims {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SwapClaims) > 0 {
		for _, e := range m.SwapClaims {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.SavingsRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.SavingsClaims) > 0 {
		for _, e := range m.SavingsClaims {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.EarnRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.EarnClaims) > 0 {
		for _, e := range m.EarnClaims {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccumulationTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccumulationTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccumulationTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousAccumulationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PreviousAccumulationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisRewardState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisRewardState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisRewardState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulationTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulationTimes = append(m.AccumulationTimes, AccumulationTime{})
			if err := m.AccumulationTimes[len(m.AccumulationTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiRewardIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiRewardIndexes = append(m.MultiRewardIndexes, MultiRewardIndex{})
			if err := m.MultiRewardIndexes[len(m.MultiRewardIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field USDXRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.USDXRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardSupplyRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HardSupplyRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardBorrowRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HardBorrowRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatorRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field USDXMintingClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.USDXMintingClaims = append(m.USDXMintingClaims, USDXMintingClaim{})
			if err := m.USDXMintingClaims[len(m.USDXMintingClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardLiquidityProviderClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardLiquidityProviderClaims = append(m.HardLiquidityProviderClaims, HardLiquidityProviderClaim{})
			if err := m.HardLiquidityProviderClaims[len(m.HardLiquidityProviderClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorClaims = append(m.DelegatorClaims, DelegatorClaim{})
			if err := m.DelegatorClaims[len(m.DelegatorClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapClaims = append(m.SwapClaims, SwapClaim{})
			if err := m.SwapClaims[len(m.SwapClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavingsRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SavingsRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavingsClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavingsClaims = append(m.SavingsClaims, SavingsClaim{})
			if err := m.SavingsClaims[len(m.SavingsClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarnRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarnClaims = append(m.EarnClaims, EarnClaim{})
			if err := m.EarnClaims[len(m.EarnClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
